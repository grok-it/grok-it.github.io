<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Integration on GrokIT</title>
    <link>https://grok-it.github.io/tags/integration/index.xml</link>
    <description>Recent content in Integration on GrokIT</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://grok-it.github.io/tags/integration/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Resiliant services communication</title>
      <link>https://grok-it.github.io/post/rest-msg/service-communication/</link>
      <pubDate>Fri, 07 Apr 2017 14:37:39 +0300</pubDate>
      
      <guid>https://grok-it.github.io/post/rest-msg/service-communication/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;imperfection-of-the-world&#34;&gt;Imperfection of the world&lt;/h2&gt;

&lt;p&gt;Microservices style of software architecture is getting more popular these days. Instead of one monolithic application, you create a number of services that communicate with each other.&lt;/p&gt;

&lt;p&gt;If our world was perfect, all the services would respond instantly and without errors. But in the real world it&amp;rsquo;s very common when:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;service returns an error&lt;/li&gt;
&lt;li&gt;service responds too slow, causing timeout&lt;/li&gt;
&lt;li&gt;network error doesn&amp;rsquo;t allow client to receive successful response from service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have to be prepared for such things if we want our system to be resilient and fault-tolerant.&lt;/p&gt;

&lt;h2 id=&#34;synchronous-rest-service&#34;&gt;Synchronous REST service&lt;/h2&gt;

&lt;p&gt;It would be first and the simplest approach.
Client calls service and waits for response. Say, we are creating user account. What if we get timeout or some other unexpected error while calling the service? Was the account created or not?&lt;/p&gt;

&lt;p&gt;If we retry our call we can get a duplicate. Or service must have some checks to return an error instead of creating duplicate. Furthermore, client has to deal with this error somehow. Things are getting quite complicated. The concept of Idempotency can help in this case.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Idempotence&lt;/strong&gt; is the property of certain operations, that can be applied multiple times without changing the result beyond the initial application&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;../rest-idempotent.gif&#34; alt=&#34;Idempotent REST&#34; title=&#34;Idempotent REST&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can build our service in such way, that instead of creating duplicate, it will &lt;strong&gt;return result of previously completed operation&lt;/strong&gt;.
Client just needs to continue calling service until it gets successful response.&lt;/p&gt;

&lt;h2 id=&#34;messaging-approach&#34;&gt;Messaging approach&lt;/h2&gt;

&lt;p&gt;Synchronous REST approach has problem with the duration of operations. Connection must be open all the time while operation is running, wasting resources both on client and server. Furthermore, some operations can take minutes, hours or even longer. For such cases messaging is more appropriate solution.
Instead of waiting for the whole operation to complete, service puts incoming message to queue and immediately responds to the client. Only when the operation is completed, services notifies client of the result.&lt;/p&gt;

&lt;h3 id=&#34;messaging-with-broker&#34;&gt;Messaging with broker&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;../messaging.gif&#34; alt=&#34;messaging&#34; title=&#34;messaging&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Client and service communicate through broker-mediator, such as ActiveMQ or RabbitMQ.
Client puts requests to one queue and subscribes for responses. Service takes requests from the incoming queue and puts responses to another.
Such system is fault tolerant, it&amp;rsquo;s easy to do load balancing, just subscribe another service instance to incoming requests.&lt;br /&gt;
But the broker is a weak spot, it&amp;rsquo;s reliability and performance are very important. Also, it&amp;rsquo;s hard to replace broker implementation.&lt;/p&gt;

&lt;h3 id=&#34;messaging-with-callback&#34;&gt;Messaging with callback&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;../callback.gif&#34; alt=&#34;callback&#34; title=&#34;callback&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Another option is to hide broker implementation inside our service or to build some custom internal queue implementation.
Client calls the service and tells it the URL where to send results of operation.&lt;/p&gt;

&lt;h2 id=&#34;feed-polling&#34;&gt;Feed polling&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;../feed.gif&#34; alt=&#34;feed&#34; title=&#34;feed&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For some cases, you can try inverted approach. Instead of service A sending messages to service B, B can periodically ask A, if it has some new messages.
For example, user changes address at service A, and you need to transport this change to service B. B periodically makes requests to A, asking, give me all the changes that have happened after time T. You don&amp;rsquo;t need any extra queues, list of users is already stored at service A with times of last modification. Changes won&amp;rsquo;t be delivered online, but it&amp;rsquo;s not always necessary.&lt;/p&gt;

&lt;p&gt;Whatever approach your choose, always ask yourself, how your system will behave if something goes wrong.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>